% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pdf_clean.R
\name{pdf_clean}
\alias{pdf_clean}
\title{Take a vector and clean the strings using regex.
Uppercase or lowercase math font is converted to uppercase or lowercase letters, respectively.
Any trailing "'s" at the end of the entity name is removed.
All non-word characters are removed.
Consecutive underscores are collapsed to a single underscore.
Leading and trailing underscores are removed.
Entities that have no letters are removed, if remove_nums is set to T.}
\usage{
pdf_clean(
  pdfs,
  keep_pages = T,
  ocr = F,
  maxchar = 10000,
  export_paths = NULL,
  return_to_memory = T,
  suppressWarn = F
)
}
\arguments{
\item{pdfs}{a vector of file names}

\item{keep_pages}{A list of logical vectors, such that each vector in the list represents a pdf
and each element of the vector represents a page. All pages for which keep_pages == T will be included
in the exported file. keep_pages defaults to a single logical value: T, which keeps all pages.}

\item{ocr}{A logical value: T to run ocr image-to-text detection on pages with fewer than 20 characters;
F to not run ocr on any pages.}

\item{maxchar}{A numeric value representing the maximum allowable number of characters per page,
with a default of 10,000. Pages on which the number of characters exceeds maxchar will have the output text
set to NA.}

\item{export_paths}{A vector of filenames to which to save the text outputs.
Defaults to NULL, which does not save the output to a file.}

\item{return_to_memory}{A logical value representing whether or not to return
the output text to memory. Defaults to T.}
}
\value{
If return_to_memory is T, returns a list with a length equal
to the length of the pdfs parameter. Each element in the list is a character vector
with a length equal to the number of pages in its respective document. If export_paths
is not null, each character vector of text will be saved to a separate RDS file, where the
number of files is equal to the number of pdfs.
}
\description{
Take a vector and clean the strings using regex.
Uppercase or lowercase math font is converted to uppercase or lowercase letters, respectively.
Any trailing "'s" at the end of the entity name is removed.
All non-word characters are removed.
Consecutive underscores are collapsed to a single underscore.
Leading and trailing underscores are removed.
Entities that have no letters are removed, if remove_nums is set to T.
}
